{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "documentation": {
    "$id": "#/definitions/documentation",
    "title": "Documentation link",
    "description": "URL to documentation describing how to configure the integration.",
    "type": "string",
    "maxLength": 2048,
    "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
  },
  "endpointUrl": {
    "$id": "#/definitions/endpoint/url",
    "title": "URL",
    "type": "string",
    "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
  },
  "endpointMethod": {
    "$id": "#/definitions/endpoint/method",
    "title": "HTTP method",
    "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
    "enum": ["POST", "PUT", "PATCH", "GET", "DELETE"],
    "type": "string"
  },
  "endpointHeaders": {
    "$id": "#/definitions/endpoint/headers",
    "title": "HTTP headers",
    "description": "Headers to send with the webhook request",
    "type": "array",
    "items": {
      "$id": "#/definitions/endpoint/header/items",
      "title": "Header items",
      "description": "A name and value pair to send as headers with the hook request",
      "type": "object",
      "propertyNames": {
        "enum": ["name", "value"]
      },
      "properties": {
        "name": {
          "$id": "#/definitions/endpoint/header/items/name",
          "title": "Name",
          "type": "string",
          "description": "Name of the header",
          "maxLength": 50,
          "pattern": "^[^\\s]*$"
        },
        "value": {
          "$id": "#/definitions/endpoint/header/items/value",
          "title": "Value",
          "type": "string",
          "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
        }
      },
      "required": ["name", "value"]
    },
    "default": [
      {
        "name": "Content-Type",
        "value": "application/json"
      }
    ],
    "examples": [
      {
        "name": "Content-Type",
        "value": "application/json"
      },
      {
        "name": "Authorization",
        "value": "Bearer {{apiToken}}"
      }
    ],
    "minProperties": 1
  },
  "endpointHmacSignature": {
    "$id": "#/definitions/endpoint/hmac-signature",
    "title": "HMAC signature",
    "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
    "type": "object",
    "propertyNames": {
      "enum": ["headerName", "hmacSecretFormVariableKey"]
    },
    "properties": {
      "headerName": {
        "$id": "#/definitions/endpoint/hmac-signature/header-name",
        "title": "HMAC signature header name",
        "description": "The name of the HMAC signature header",
        "type": "string"
      },
      "hmacSecretFormVariableKey": {
        "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
        "title": "HMAC secret form variable key",
        "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
        "type": "string"
      }
    }
  },
  "endpointProperties": {
    "url": {
      "$ref": "#/endpointUrl"
    },
    "method": {
      "$ref": "#/endpointMethod"
    },
    "headers": {
      "$ref": "#/endpointHeaders"
    },
    "hmacSignature": {
      "$ref": "#/endpointHmacSignature"
    }
  },
  "endpoint": {
    "$id": "#/definitions/endpoint",
    "title": "Endpoint",
    "description": "Properties that describe an HTTP request to an external endpoint",
    "type": "object",
    "propertyNames": {
      "enum": ["url", "method", "headers", "hmacSignature"]
    },
    "properties": {
      "$ref": "#/endpointProperties"
    },
    "required": ["url", "method"]
  },
  "jsonBody": {
    "$id": "#/definitions/json-body",
    "title": "JSON Body",
    "description": "Template string used to render the JSON request body",
    "type": "string"
  },
  "formVariable": {
    "$id": "#/definitions/form-variable",
    "title": "Form variable",
    "description": "A form variable describes an object property that the LaunchDarkly admin will be prompted for when they configure an integration.",
    "type": "object",
    "propertyNames": {
      "enum": [
        "key",
        "name",
        "type",
        "description",
        "placeholder",
        "isSecret",
        "isHidden",
        "isOptional",
        "defaultValue",
        "allowedValues",
        "dynamicOptions",
        "dependsOn"
      ]
    },
    "properties": {
      "key": {
        "$id": "#/definitions/form-variable/key",
        "title": "Key",
        "type": "string",
        "description": "A key will be used as the token name when the variable is substituted",
        "maxLength": 20,
        "pattern": "^[^\\s]*$"
      },
      "name": {
        "$id": "#/definitions/form-variable/name",
        "title": "Name",
        "type": "string",
        "description": "A descriptive name that will be used as the form label on the UI",
        "maxLength": 50
      },
      "type": {
        "$id": "#/definitions/form-variable/type",
        "title": "Type",
        "type": "string",
        "description": "The type of the variable",
        "enum": [
          "string",
          "boolean",
          "uri",
          "enum",
          "oauth",
          "dynamicEnum",
          "generated"
        ]
      },
      "description": {
        "$id": "#/definitions/form-variable/description",
        "title": "Description",
        "type": "string",
        "description": "Describes the variable in the UI. Markdown links allowed.",
        "maxLength": 250
      },
      "placeholder": {
        "$id": "#/definitions/form-variable/placeholder",
        "title": "Description",
        "type": "string",
        "description": "Placeholder value to use in the form element if applicable"
      },
      "isSecret": {
        "$id": "#/definitions/form-variable/is-secret",
        "title": "Is this variable a secret?",
        "type": "boolean",
        "description": "Secret variables will be masked in the UI",
        "default": false
      },
      "isOptional": {
        "$id": "#/definitions/form-variable/is-optional",
        "title": "Is this variable optional?",
        "type": "boolean",
        "description": "Variables marked as optional won't be required on the UI",
        "default": false
      },
      "isHidden": {
        "$id": "#/definitions/form-variable/is-hidden",
        "title": "Hide variable in the UI",
        "type": "boolean",
        "description": "Variables marked as hidden won't be displayed on the UI",
        "default": false
      },
      "defaultValue": {
        "$id": "#/definitions/form-variable/default-value",
        "title": "Default value",
        "type": ["boolean", "string"],
        "description": "Default value for variable. Can be overridden by the user in the UI"
      },
      "allowedValues": {
        "$id": "#/definitions/form-variable/allowed-values",
        "title": "Allowed values",
        "type": "array",
        "description": "Allowed string values for enum-type formVariables",
        "items": {
          "type": "string"
        }
      },
      "dynamicOptions": {
        "$id": "#/definitions/form-variable/dynamic-options",
        "title": "Dynamic options",
        "type": "object",
        "description": "Parser and endpoint for handling dynamicEnum",
        "propertyNames": {
          "enum": ["endpoint", "parser"]
        },
        "required": ["endpoint", "parser"],
        "properties": {
          "endpoint": {
            "$ref": "#/endpoint"
          },
          "parser": {
            "$id": "#/definitions/form-variable/dynamic-options/parser",
            "title": "Dynamic options parser",
            "description": "Mapping of property names to location in JSON response",
            "type": "object",
            "required": ["optionsPath", "optionsItems"],
            "propertyNames": {
              "enum": ["optionsPath", "optionsItems"]
            },
            "properties": {
              "optionsPath": {
                "$id": "#/definitions/form-variable/dynamic-options/parser/options-path",
                "title": "Options array path",
                "description": "JSON path to the array containing options for parsing",
                "type": "string"
              },
              "optionsItems": {
                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items",
                "title": "Options array",
                "propertyNames": {
                  "enum": ["label", "value"]
                },
                "required": ["label", "value"],
                "properties": {
                  "label": {
                    "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/label",
                    "title": "Label",
                    "description": "Relative JSON path to values for each item in the options array to be used as UI dropdown labels",
                    "type": "string"
                  },
                  "value": {
                    "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/value",
                    "title": "Value",
                    "description": "Relative JSON path to values for each item in the options array to be used as dropdown values",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "dependsOn": {
        "$id": "#/definitions/form-variable/depends-on",
        "title": "Depends on",
        "type": "array",
        "description": "Dependency configuration to control the state and visibility of the form field.",
        "items": {
          "type": "object",
          "propertyNames": {
            "enum": ["variableKey", "variableLocation", "conditions", "action"]
          },
          "required": [
            "variableKey",
            "variableLocation",
            "conditions",
            "action"
          ],
          "properties": {
            "variableKey": {
              "$id": "#/definitions/form-variable/depends-on/dependee-key",
              "title": "Variable key",
              "type": "string",
              "description": "Key for the form variable that this form field depends on",
              "maxLength": 20,
              "pattern": "^[^\\s]*$"
            },
            "variableLocation": {
              "$id": "#/definitions/form-variable/depends-on/dependee-key-location",
              "title": "Variable Location",
              "type": "string",
              "description": "Which form variable type is the variable key defined or located in?",
              "enum": [
                "flagFormVariables",
                "environmentFormVariables",
                "formVariables"
              ]
            },
            "action": {
              "$id": "#/definitions/form-variable/depends-on/action",
              "title": "Action",
              "type": "string",
              "enum": ["hideField", "showField"],
              "description": "Action to be taken when your defined conditions evaluates to true"
            },
            "conditions": {
              "$id": "#/definitions/form-variable/depends-on/conditions",
              "title": "Conditions",
              "type": "array",
              "description": "Conditional configurations to be evaluated to decide whether an action should taken for the form field.",
              "items": {
                "type": "object",
                "propertyNames": {
                  "enum": ["operator", "value"]
                },
                "required": ["operator", "value"],
                "properties": {
                  "operator": {
                    "$id": "#/definitions/form-variable/depends-on/conditions/operator",
                    "title": "Operator",
                    "type": "string",
                    "description": "Name of the operator for evaluating a condition.",
                    "enum": [
                      "lessThan",
                      "lessThanOrEqualTo",
                      "greaterThan",
                      "greaterThanOrEqualTo",
                      "equalTo",
                      "notEqual",
                      "contains",
                      "startsWith",
                      "endsWith"
                    ]
                  },
                  "value": {
                    "$id": "#/definitions/form-variable/depends-on/conditions/value",
                    "title": "Value",
                    "type": "string",
                    "maxLength": 250,
                    "description": "Target value that conditions are evaluated against"
                  }
                }
              }
            }
          }
        }
      }
    },
    "required": ["key", "name", "type", "description"]
  },
  "uiBlockElement": {
    "$id": "#/definitions/ui-block-element",
    "title": "UI Block Element",
    "description": "A sub component of a UI block that can be combined with other elements to form a UI block",
    "type": "object",
    "propertyNames": {
      "enum": ["text", "isBold", "url", "isTimestamp"]
    },
    "required": ["text"],
    "properties": {
      "text": {
        "$id": "#/definitions/ui-block-element/text",
        "title": "Text",
        "description": "Text to be displayed for the element. The text can contain template variables",
        "type": "string"
      },
      "isBold": {
        "$id": "#/definitions/ui-block-element/text",
        "title": "Is bold",
        "description": "Indicates whether the element should be bolded",
        "type": "boolean",
        "default": false
      },
      "isTimestamp": {
        "$id": "#/definitions/ui-block-element/is-timestamp",
        "title": "Is timestamp",
        "description": "Indicates whether the element should be rendered as a timestamp",
        "type": "boolean",
        "default": false
      },
      "url": {
        "$id": "#/definitions/ui-block-element/url",
        "title": "Url",
        "description": "URL to be set for the element which also indicates the element should be rendered as a hyperlink",
        "type": "string"
      }
    }
  }
}
