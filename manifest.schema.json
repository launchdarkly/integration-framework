{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://launchdarkly.com/schemas/v1.0/manifest.schema.json#",
  "title": "LaunchDarkly Integrations Manifest",
  "description": "Describes the capabilities and intent of a LaunchDarkly integration",
  "type": "object",
  "propertyNames": {
    "enum": [
      "name",
      "version",
      "overview",
      "description",
      "details",
      "author",
      "supportEmail",
      "links",
      "categories",
      "icons",
      "formVariables",
      "capabilities",
      "legacy",
      "otherCapabilities",
      "requiresOAuth",
      "hideOnIntegrationsPage",
      "oauthIntegrationKey"
    ]
  },
  "properties": {
    "name": {
      "$id": "#/properties/name",
      "title": "Integration name",
      "description": "Your integration's name.",
      "minLength": 3,
      "maxLength": 100,
      "type": "string"
    },
    "version": {
      "$id": "#/properties/version",
      "title": "Version",
      "description": "A semantic version of the integration. See https://semver.org for more info.",
      "examples": [
        "0.0.1",
        "1.0.0",
        "1.0.1-beta"
      ],
      "type": "string",
      "minLength": 5,
      "maxLength": 14,
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "overview": {
      "$id": "#/properties/overview",
      "title": "Short description",
      "description": "A short-one liner describing your integration",
      "type": "string",
      "minLength": 10,
      "maxLength": 100,
      "pattern": "^(.*)$"
    },
    "description": {
      "$id": "#/properties/description",
      "title": "Long description",
      "description": "A longer description of your integration",
      "type": "string",
      "minLength": 50,
      "maxLength": 2048,
      "pattern": "^(.*)$"
    },
    "details": {
      "#id": "#/properties/details",
      "title": "Learn more details",
      "description": "Details about your integration and next steps if the installation happens outside of LaunchDarkly",
      "type": "string",
      "minLength": 50,
      "maxLength": 2048,
      "pattern": "^(.*)$"
    },
    "author": {
      "$id": "#/properties/author",
      "title": "Author",
      "description": "Name of the author or organization responsible for the integration",
      "type": "string",
      "minLength": 3,
      "maxLength": 100,
      "pattern": "^(.*)$"
    },
    "supportEmail": {
      "$id": "#/properties/links/support-email",
      "title": "Support Email",
      "description": "Email address for your integration's support",
      "type": "string",
      "format": "email"
    },
    "links": {
      "$id": "#/properties/links",
      "title": "Links",
      "description": "A set of reference links supporting your integration",
      "type": "object",
      "propertyNames": {
        "enum": [
          "site",
          "launchdarklyDocs",
          "privacyPolicy",
          "supportWebsite"
        ]
      },
      "properties": {
        "site": {
          "$id": "#/properties/links/site",
          "title": "Website",
          "description": "URL to your website",
          "type": "string",
          "maxLength": 2048,
          "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
        },
        "launchdarklyDocs": {
          "$id": "#/properties/links/launchdarkly-docs",
          "title": "LaunchDarkly Documentation",
          "description": "URL to the LaunchDarkly documentation for this integration",
          "type": "string",
          "maxLength": 2048,
          "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
        },
        "privacyPolicy": {
          "$id": "#/properties/links/privacy-policy",
          "title": "Privacy Policy",
          "description": "URL to your organization's privacy policy",
          "type": "string",
          "maxLength": 2048,
          "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
        },
        "supportWebsite": {
          "$id": "#/properties/links/support-website",
          "title": "Support Website",
          "description": "URL to your integration's support website",
          "type": "string",
          "maxLength": 2048,
          "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
        }
      },
      "required": [
        "site",
        "privacyPolicy"
      ]
    },
    "categories": {
      "$id": "#/properties/categories",
      "title": "Categories",
      "description": "Categories that describe your integration",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "maxItems": 3,
      "items": {
        "type": "string",
        "enum": [
          "analytics",
          "approval",
          "authentication",
          "automation",
          "big-segment-store",
          "code-references",
          "customer-support",
          "data",
          "developer-tools",
          "import",
          "infrastructure",
          "issue-tracking",
          "log-management",
          "messaging",
          "monitoring",
          "synced-segments",
          "notifications"
        ]
      }
    },
    "icons": {
      "$id": "#/properties/icons",
      "title": "Icons",
      "description": "Logos describing your integration in SVG format",
      "type": "object",
      "propertyNames": {
        "enum": [
          "square",
          "horizontal"
        ]
      },
      "properties": {
        "square": {
          "$id": "#/properties/icons/square",
          "title": "Square logo",
          "description": "A square version of your integration's logo in SVG format",
          "type": "string",
          "pattern": "\\.svg$"
        },
        "horizontal": {
          "$id": "#/properties/icons/horizontal",
          "title": "Horizontal logo",
          "description": "A horizontal version of your integration's logo in SVG format",
          "type": "string",
          "pattern": "\\.svg$"
        }
      },
      "required": [
        "square",
        "horizontal"
      ]
    },
    "legacy": {
      "$id": "#/properties/legacy",
      "title": "Legacy",
      "description": "Legacy integration",
      "type": "object",
      "propertyNames": {
        "enum": [
          "kind"
        ]
      },
      "properties": {
        "kind": {
          "$id": "#/properties/legacy/kind",
          "title": "Kind",
          "description": "Kind of legacy integration",
          "type": "string",
          "enum": [
            "codeRefs",
            "datadog",
            "dataExport",
            "slackWebhooks",
            "webhooks"
          ]
        }
      },
      "required": [
        "kind"
      ]
    },
    "otherCapabilities": {
      "$id": "#/properties/other-capabilities",
      "title": "Other capabilities",
      "description": "Capabilities not configured by manifests",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string",
        "enum": [
          "codeRefs",
          "dataExport",
          "external",
          "ide",
          "sso",
          "webhooks"
        ]
      }
    },
    "requiresOAuth": {
      "$id": "#/properties/requires-oauth",
      "title": "Requires OAuth",
      "type": "boolean",
      "description": "Whether the integration authenticates using OAuth",
      "default": false
    },
    "hideOnIntegrationsPage": {
      "$id": "#/properties/hide-on-integrations-page",
      "title": "Hide On Integrations Page",
      "type": "boolean",
      "description": "Whether the your app should be excluded from the list of integration cards displayed on our integrations page in the web app",
      "default": false
    },
    "formVariables": {
      "$id": "#/properties/form-variables",
      "title": "Form variables",
      "description": "Form variables will be rendered on the integration configuration page. These are variables you need an admin to supply when they enable the integration. Examples of a form variable include `apiToken` or `url`.",
      "type": "array",
      "items": {
        "$id": "#/definitions/form-variable",
        "title": "Form variable",
        "description": "A form variable describes an object property that the LaunchDarkly admin will be prompted for when they configure an integration.",
        "type": "object",
        "propertyNames": {
          "enum": [
            "key",
            "name",
            "type",
            "description",
            "placeholder",
            "isSecret",
            "isHidden",
            "isOptional",
            "defaultValue",
            "allowedValues",
            "dynamicOptions",
            "dependsOn"
          ]
        },
        "properties": {
          "key": {
            "$id": "#/definitions/form-variable/key",
            "title": "Key",
            "type": "string",
            "description": "A key will be used as the token name when the variable is substituted",
            "maxLength": 20,
            "pattern": "^[^\\s]*$"
          },
          "name": {
            "$id": "#/definitions/form-variable/name",
            "title": "Name",
            "type": "string",
            "description": "A descriptive name that will be used as the form label on the UI",
            "maxLength": 50
          },
          "type": {
            "$id": "#/definitions/form-variable/type",
            "title": "Type",
            "type": "string",
            "description": "The type of the variable",
            "enum": [
              "string",
              "boolean",
              "uri",
              "enum",
              "oauth",
              "dynamicEnum",
              "generated"
            ]
          },
          "description": {
            "$id": "#/definitions/form-variable/description",
            "title": "Description",
            "type": "string",
            "description": "Describes the variable in the UI. Markdown links allowed.",
            "maxLength": 250
          },
          "placeholder": {
            "$id": "#/definitions/form-variable/placeholder",
            "title": "Description",
            "type": "string",
            "description": "Placeholder value to use in the form element if applicable"
          },
          "isSecret": {
            "$id": "#/definitions/form-variable/is-secret",
            "title": "Is this variable a secret?",
            "type": "boolean",
            "description": "Secret variables will be masked in the UI",
            "default": false
          },
          "isOptional": {
            "$id": "#/definitions/form-variable/is-optional",
            "title": "Is this variable optional?",
            "type": "boolean",
            "description": "Variables marked as optional won't be required on the UI",
            "default": false
          },
          "isHidden": {
            "$id": "#/definitions/form-variable/is-hidden",
            "title": "Hide variable in the UI",
            "type": "boolean",
            "description": "Variables marked as hidden won't be displayed on the UI",
            "default": false
          },
          "defaultValue": {
            "$id": "#/definitions/form-variable/default-value",
            "title": "Default value",
            "type": [
              "boolean",
              "string"
            ],
            "description": "Default value for variable. Can be overridden by the user in the UI"
          },
          "allowedValues": {
            "$id": "#/definitions/form-variable/allowed-values",
            "title": "Allowed values",
            "type": "array",
            "description": "Allowed string values for enum-type formVariables",
            "items": {
              "type": "string"
            }
          },
          "dynamicOptions": {
            "$id": "#/definitions/form-variable/dynamic-options",
            "title": "Dynamic options",
            "type": "object",
            "description": "Parser and endpoint for handling dynamicEnum",
            "propertyNames": {
              "enum": [
                "endpoint",
                "parser"
              ]
            },
            "required": [
              "endpoint",
              "parser"
            ],
            "properties": {
              "endpoint": {
                "$id": "#/definitions/endpoint",
                "title": "Endpoint",
                "description": "Properties that describe an HTTP request to an external endpoint",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "url",
                    "method",
                    "headers",
                    "hmacSignature"
                  ]
                },
                "properties": {
                  "url": {
                    "$id": "#/definitions/endpoint/url",
                    "title": "URL",
                    "type": "string",
                    "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                  },
                  "method": {
                    "$id": "#/definitions/endpoint/method",
                    "title": "HTTP method",
                    "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                    "enum": [
                      "POST",
                      "PUT",
                      "PATCH",
                      "GET",
                      "DELETE"
                    ],
                    "type": "string"
                  },
                  "headers": {
                    "$id": "#/definitions/endpoint/headers",
                    "title": "HTTP headers",
                    "description": "Headers to send with the webhook request",
                    "type": "array",
                    "items": {
                      "$id": "#/definitions/endpoint/header/items",
                      "title": "Header items",
                      "description": "A name and value pair to send as headers with the hook request",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "name",
                          "value"
                        ]
                      },
                      "properties": {
                        "name": {
                          "$id": "#/definitions/endpoint/header/items/name",
                          "title": "Name",
                          "type": "string",
                          "description": "Name of the header",
                          "maxLength": 50,
                          "pattern": "^[^\\s]*$"
                        },
                        "value": {
                          "$id": "#/definitions/endpoint/header/items/value",
                          "title": "Value",
                          "type": "string",
                          "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    },
                    "default": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "examples": [
                      {
                        "name": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "name": "Authorization",
                        "value": "Bearer {{apiToken}}"
                      }
                    ],
                    "minProperties": 1
                  },
                  "hmacSignature": {
                    "$id": "#/definitions/endpoint/hmac-signature",
                    "title": "HMAC signature",
                    "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                    "type": "object",
                    "propertyNames": {
                      "enum": [
                        "headerName",
                        "hmacSecretFormVariableKey"
                      ]
                    },
                    "properties": {
                      "headerName": {
                        "$id": "#/definitions/endpoint/hmac-signature/header-name",
                        "title": "HMAC signature header name",
                        "description": "The name of the HMAC signature header",
                        "type": "string"
                      },
                      "hmacSecretFormVariableKey": {
                        "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                        "title": "HMAC secret form variable key",
                        "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "url",
                  "method"
                ]
              },
              "parser": {
                "$id": "#/definitions/form-variable/dynamic-options/parser",
                "title": "Dynamic options parser",
                "description": "Mapping of property names to location in JSON response",
                "type": "object",
                "required": [
                  "optionsPath",
                  "optionsItems"
                ],
                "propertyNames": {
                  "enum": [
                    "optionsPath",
                    "optionsItems"
                  ]
                },
                "properties": {
                  "optionsPath": {
                    "$id": "#/definitions/form-variable/dynamic-options/parser/options-path",
                    "title": "Options array path",
                    "description": "JSON path to the array containing options for parsing",
                    "type": "string"
                  },
                  "optionsItems": {
                    "$id": "#/definitions/form-variable/dynamic-options/parser/options-items",
                    "title": "Options array",
                    "propertyNames": {
                      "enum": [
                        "label",
                        "value"
                      ]
                    },
                    "required": [
                      "label",
                      "value"
                    ],
                    "properties": {
                      "label": {
                        "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/label",
                        "title": "Label",
                        "description": "Relative JSON path to values for each item in the options array to be used as UI dropdown labels",
                        "type": "string"
                      },
                      "value": {
                        "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/value",
                        "title": "Value",
                        "description": "Relative JSON path to values for each item in the options array to be used as dropdown values",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "dependsOn": {
            "$id": "#/definitions/form-variable/depends-on",
            "title": "Depends on",
            "type": "array",
            "description": "Dependency configuration to control the state and visibility of the form field.",
            "items": {
              "type": "object",
              "propertyNames": {
                "enum": [
                  "variableKey",
                  "variableLocation",
                  "conditions",
                  "action"
                ]
              },
              "required": [
                "variableKey",
                "variableLocation",
                "conditions",
                "action"
              ],
              "properties": {
                "variableKey": {
                  "$id": "#/definitions/form-variable/depends-on/dependee-key",
                  "title": "Variable key",
                  "type": "string",
                  "description": "Key for the form variable that this form field depends on",
                  "maxLength": 20,
                  "pattern": "^[^\\s]*$"
                },
                "variableLocation": {
                  "$id": "#/definitions/form-variable/depends-on/dependee-key-location",
                  "title": "Variable Location",
                  "type": "string",
                  "description": "Which form variable type is the variable key defined or located in?",
                  "enum": [
                    "flagFormVariables",
                    "environmentFormVariables",
                    "formVariables"
                  ]
                },
                "action": {
                  "$id": "#/definitions/form-variable/depends-on/action",
                  "title": "Action",
                  "type": "string",
                  "enum": [
                    "hideField",
                    "showField"
                  ],
                  "description": "Action to be taken when your defined conditions evaluates to true"
                },
                "conditions": {
                  "$id": "#/definitions/form-variable/depends-on/conditions",
                  "title": "Conditions",
                  "type": "array",
                  "description": "Conditional configurations to be evaluated to decide whether an action should taken for the form field.",
                  "items": {
                    "type": "object",
                    "propertyNames": {
                      "enum": [
                        "operator",
                        "value"
                      ]
                    },
                    "required": [
                      "operator",
                      "value"
                    ],
                    "properties": {
                      "operator": {
                        "$id": "#/definitions/form-variable/depends-on/conditions/operator",
                        "title": "Operator",
                        "type": "string",
                        "description": "Name of the operator for evaluating a condition.",
                        "enum": [
                          "lessThan",
                          "lessThanOrEqualTo",
                          "greaterThan",
                          "greaterThanOrEqualTo",
                          "equalTo",
                          "notEqual",
                          "contains",
                          "startsWith",
                          "endsWith"
                        ]
                      },
                      "value": {
                        "$id": "#/definitions/form-variable/depends-on/conditions/value",
                        "title": "Value",
                        "type": "string",
                        "maxLength": 250,
                        "description": "Target value that conditions are evaluated against"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "key",
          "name",
          "type",
          "description"
        ]
      },
      "default": []
    },
    "capabilities": {
      "$id": "#/properties/capabilities",
      "title": "Capabilities",
      "description": "Specify which capabilities you'd like your integration to have",
      "type": "object",
      "propertyNames": {
        "enum": [
          "auditLogEventsHook",
          "reservedCustomProperties",
          "trigger",
          "approval",
          "featureStore",
          "flagLink",
          "hideConfiguration",
          "externalConfigurationURL",
          "externalConfigurationPages",
          "syncedSegment",
          "bigSegmentStore"
        ]
      },
      "properties": {
        "auditLogEventsHook": {
          "$id": "#/properties/capability/audit-log-events-hook",
          "title": "Audit log events hook",
          "description": "This capability will enable LaunchDarkly to send audit log event webhooks to your endpoint.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "endpoint",
              "templates",
              "defaultPolicy",
              "includeErrorResponseBody",
              "deliveryMethod",
              "useStandardWebhookPayload"
            ]
          },
          "properties": {
            "endpoint": {
              "$id": "#/definitions/endpoint",
              "title": "Endpoint",
              "description": "Properties that describe an HTTP request to an external endpoint",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "url",
                  "method",
                  "headers",
                  "hmacSignature"
                ]
              },
              "properties": {
                "url": {
                  "$id": "#/definitions/endpoint/url",
                  "title": "URL",
                  "type": "string",
                  "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                },
                "method": {
                  "$id": "#/definitions/endpoint/method",
                  "title": "HTTP method",
                  "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                  "enum": [
                    "POST",
                    "PUT",
                    "PATCH",
                    "GET",
                    "DELETE"
                  ],
                  "type": "string"
                },
                "headers": {
                  "$id": "#/definitions/endpoint/headers",
                  "title": "HTTP headers",
                  "description": "Headers to send with the webhook request",
                  "type": "array",
                  "items": {
                    "$id": "#/definitions/endpoint/header/items",
                    "title": "Header items",
                    "description": "A name and value pair to send as headers with the hook request",
                    "type": "object",
                    "propertyNames": {
                      "enum": [
                        "name",
                        "value"
                      ]
                    },
                    "properties": {
                      "name": {
                        "$id": "#/definitions/endpoint/header/items/name",
                        "title": "Name",
                        "type": "string",
                        "description": "Name of the header",
                        "maxLength": 50,
                        "pattern": "^[^\\s]*$"
                      },
                      "value": {
                        "$id": "#/definitions/endpoint/header/items/value",
                        "title": "Value",
                        "type": "string",
                        "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                      }
                    },
                    "required": [
                      "name",
                      "value"
                    ]
                  },
                  "default": [
                    {
                      "name": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "examples": [
                    {
                      "name": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Authorization",
                      "value": "Bearer {{apiToken}}"
                    }
                  ],
                  "minProperties": 1
                },
                "hmacSignature": {
                  "$id": "#/definitions/endpoint/hmac-signature",
                  "title": "HMAC signature",
                  "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "headerName",
                      "hmacSecretFormVariableKey"
                    ]
                  },
                  "properties": {
                    "headerName": {
                      "$id": "#/definitions/endpoint/hmac-signature/header-name",
                      "title": "HMAC signature header name",
                      "description": "The name of the HMAC signature header",
                      "type": "string"
                    },
                    "hmacSecretFormVariableKey": {
                      "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                      "title": "HMAC secret form variable key",
                      "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "url",
                "method"
              ]
            },
            "templates": {
              "$id": "#/properties/capability/audit-log-events-hook/templates",
              "title": "Webhook body template",
              "description": "Templates to use for body of the webhook request",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "flag",
                  "project",
                  "environment",
                  "default",
                  "validation",
                  "member"
                ]
              },
              "properties": {
                "flag": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/flag",
                  "title": "Flag template",
                  "description": "Template to use for flag events",
                  "type": "string"
                },
                "project": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/project",
                  "title": "Project template",
                  "description": "Template to use for project events",
                  "type": "string"
                },
                "environment": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/environment",
                  "title": "Environment template",
                  "description": "Template to use for environment events",
                  "type": "string"
                },
                "default": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/default",
                  "title": "default template",
                  "description": "Template to use if the event does not have a corresponding named template",
                  "type": "string"
                },
                "validation": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/validation",
                  "title": "validation template",
                  "description": "Template to use when sending test events with the 'validate connection' button",
                  "type": "string"
                },
                "member": {
                  "$id": "#/properties/capability/audit-log-events-hook/templates/member",
                  "title": "Member template",
                  "description": "Template to use for member events",
                  "type": "string"
                }
              }
            },
            "defaultPolicy": {
              "$id": "#/properties/capability/audit-log-events-hook/default-policy",
              "title": "Default Policy",
              "description": "LaunchDarkly policy that allows you to filter events sent to your webhook. See https://docs.launchdarkly.com/home/members/role-policies for more information.",
              "type": "array",
              "minItems": 1,
              "items": {
                "$id": "#/properties/capability/audit-log-events-hook/policy",
                "title": "Policy",
                "description": "A LaunchDarkly policy. See https://docs.launchdarkly.com/home/members/role-policies for more information.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "actions",
                    "effect",
                    "notActions",
                    "notResources",
                    "resources"
                  ]
                },
                "properties": {
                  "actions": {
                    "$id": "#/properties/capability/audit-log-events-hook/policy/actions",
                    "title": "Actions",
                    "description": "A list of action specifiers defining the actions to which the statement applies. See https://docs.launchdarkly.com/home/members/role-actions for more information.",
                    "default": [
                      "*"
                    ],
                    "examples": [
                      "updateOn",
                      "createFlag",
                      "updateRules",
                      "updateTargets"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "effect": {
                    "$id": "#/properties/capability/audit-log-events-hook/policy/effect",
                    "title": "Effect",
                    "description": "This attribute defines whether the statement allows or denies access to the named resources and actions.",
                    "default": "allow",
                    "type": "string",
                    "enum": [
                      "allow",
                      "deny"
                    ]
                  },
                  "notActions": {
                    "$id": "#/properties/capability/audit-log-events-hook/policy/not-actions",
                    "title": "Not actions",
                    "description": "A list of action specifiers defining the actions to which the statement does not apply. See https://docs.launchdarkly.com/home/members/role-actions for more information.",
                    "default": [
                      "*"
                    ],
                    "examples": [
                      "createFlag",
                      "deleteFlag",
                      "cloneFlag"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notResources": {
                    "$id": "#/properties/capability/audit-log-events-hook/policy/not-resources",
                    "title": "Not resources",
                    "description": "A list of resource specifiers defining the resources to which the statement does not apply. See https://docs.launchdarkly.com/home/members/role-resources for more information.",
                    "default": [
                      "*"
                    ],
                    "examples": [
                      "proj/*:env/production:flag/*"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "resources": {
                    "$id": "#/properties/capability/audit-log-events-hook/policy/resources",
                    "title": "Resources",
                    "description": "A list of resource specifiers defining the resources to which the statement applies. See https://docs.launchdarkly.com/home/members/role-resources for more information.",
                    "default": [
                      "*"
                    ],
                    "examples": [
                      "proj/*:env/production:flag/*"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "includeErrorResponseBody": {
              "$id": "#/properties/include-error-response-body",
              "title": "Include error response body",
              "type": "boolean",
              "description": "Whether errors received from your endpoint should be displayed in the error log in LaunchDarkly UI",
              "default": false
            },
            "deliveryMethod": {
              "$id": "#/properties/delivery-method",
              "title": "Delivery Method",
              "type": "string",
              "enum": [
                "custom"
              ],
              "description": "Describes how the audit log event will be delivered to the destination. Custom delivery method indicates a custom delivery implementation in LaunchDarkly will be used."
            },
            "useStandardWebhookPayload": {
              "$id": "#/properties/use-standard-webhook-payload",
              "title": "Use standard webhook payload",
              "type": "boolean",
              "description": "Whether to send the standard audit log webhook payload or to use defined JSON templates",
              "default": false
            }
          },
          "required": [
            "templates"
          ]
        },
        "reservedCustomProperties": {
          "$id": "#/properties/capability/reserved-custom-properties",
          "title": "Reserved custom properties",
          "description": "This capability will reserve integration-specific custom property options in the global flag setting configuration. These custom properties will only be presented to users after they have have configured an integration subscription. Read https://docs.launchdarkly.com/home/connecting/custom-properties for more information on custom properties",
          "type": "array",
          "items": {
            "$id": "#/properties/capability/reserved-custom-properties/items",
            "type": "object",
            "propertyNames": {
              "enum": [
                "name",
                "key",
                "description"
              ]
            },
            "properties": {
              "name": {
                "$id": "#/properties/capability/reserved-custom-properties/items/name",
                "title": "Name",
                "type": "string",
                "description": "The reserved custom property's display name.",
                "maxLength": 64
              },
              "key": {
                "$id": "#/properties/capability/reserved-custom-properties/items/key",
                "title": "Key",
                "type": "string",
                "description": "The custom property's API response key.",
                "maxLength": 64
              },
              "description": {
                "$id": "#/properties/capability/reserved-custom-properties/items/description",
                "title": "Description",
                "type": "string",
                "description": "The custom property's description.",
                "maxLength": 250
              }
            },
            "required": [
              "name",
              "key"
            ]
          },
          "minLength": 1,
          "maxLength": 3
        },
        "trigger": {
          "$id": "#/properties/capability/trigger",
          "title": "Trigger",
          "description": "This capability is used to manage inbound webhook entry points that trigger feature flag changes in LaunchDarkly",
          "type": "object",
          "propertyNames": {
            "enum": [
              "documentation",
              "auth",
              "parser",
              "defaultEventName",
              "testEventNameRegexp"
            ]
          },
          "required": [
            "documentation"
          ],
          "properties": {
            "documentation": {
              "$id": "#/definitions/documentation",
              "title": "Documentation link",
              "description": "URL to documentation describing how to configure the integration.",
              "type": "string",
              "maxLength": 2048,
              "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
            },
            "auth": {
              "$id": "#/properties/capability/trigger/auth",
              "title": "Authentication",
              "description": "Authentication type - currently the only option is sharedSecret.",
              "type": "string",
              "enum": [
                "sharedSecret"
              ]
            },
            "defaultEventName": {
              "$id": "#/properties/capability/trigger/default-event-name",
              "title": "Default event name",
              "description": "The default event name string used in the audit log if an eventName cannot be parsed in the trigger request body.",
              "type": "string",
              "default": "An alert"
            },
            "testEventNameRegexp": {
              "$id": "#/properties/capability/trigger/test-event-name-regexp",
              "title": "Test Event Name Regex",
              "description": "The expected eventName of the integration partner's test events",
              "type": "string",
              "default": ".*[Tt][Ee][Ss][Tt].*"
            },
            "parser": {
              "$id": "#/trigger-parser",
              "title": "Trigger parser",
              "description": "Describes a mapping of property name to a location in the JSON response payload specified by a JSON pointer",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "eventName",
                  "value",
                  "url"
                ]
              },
              "properties": {
                "eventName": {
                  "$id": "#/properties/event-name",
                  "title": "Event name pointer",
                  "description": "JSON pointer to an event name",
                  "type": "string"
                },
                "value": {
                  "$id": "#/properties/value",
                  "title": "Value pointer",
                  "description": "JSON pointer to a metric value",
                  "type": "string"
                },
                "url": {
                  "$id": "#/properties/url",
                  "title": "URL pointer",
                  "description": "JSON pointer to the external alert URL",
                  "type": "string"
                }
              }
            }
          }
        },
        "approval": {
          "$id": "#/capabilities/approval",
          "title": "Approval",
          "description": "This capability enables integration-driven flag change approvals",
          "type": "object",
          "propertyNames": {
            "enum": [
              "name",
              "environmentFormVariables",
              "flagFormVariables",
              "creationRequest",
              "statusRequest",
              "postApplyRequest",
              "deletionRequest",
              "memberListRequest"
            ]
          },
          "required": [
            "creationRequest",
            "statusRequest",
            "postApplyRequest",
            "deletionRequest",
            "memberListRequest"
          ],
          "properties": {
            "name": {
              "$id": "#/capabilities/approval/name",
              "title": "Approval System Name",
              "type": "string",
              "description": "Name of the approval system. Default's to the integration's name if not specified.",
              "minLength": 1,
              "maxLength": 100
            },
            "memberListRequest": {
              "$id": "#/capabilities/approval/member-list-request",
              "title": "Member List Request",
              "description": "Describes the HTTP request to get integration users for mapping to Launchdarkly users",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "jsonBody",
                  "parser"
                ]
              },
              "required": [
                "endpoint",
                "parser"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "jsonBody": {
                  "$id": "#/definitions/json-body",
                  "title": "JSON Body",
                  "description": "Template string used to render the JSON request body",
                  "type": "string"
                },
                "parser": {
                  "$id": "#/member-list-parser",
                  "title": "Member list parser",
                  "description": "Describes a mapping of integration member information to a location in the JSON response payload specified by a JSON pointer",
                  "type": "object",
                  "required": [
                    "memberArrayPath",
                    "memberItems"
                  ],
                  "propertyNames": {
                    "enum": [
                      "memberArrayPath",
                      "memberItems"
                    ]
                  },
                  "properties": {
                    "memberArrayPath": {
                      "$id": "#/member-list-parser/member-array-path",
                      "title": "Member array path",
                      "description": "JSON path to the array containing integration member details",
                      "type": "string"
                    },
                    "memberItems": {
                      "$id": "#/member-list-parser/member-items",
                      "title": "Member items array",
                      "propertyNames": {
                        "enum": [
                          "email",
                          "memberId"
                        ]
                      },
                      "required": [
                        "email",
                        "memberId"
                      ],
                      "properties": {
                        "email": {
                          "$id": "#/member-list-parser/member-items/email",
                          "title": "Email",
                          "description": "Relative JSON path to the email field in each member item in the array",
                          "type": "string"
                        },
                        "memberId": {
                          "$id": "#/member-list-parser/member-items/member-id",
                          "title": "Member ID",
                          "description": "Relative JSON path to the integration member ID field in each member item in the array",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "environmentFormVariables": {
              "$id": "#/capabilities/approval/environment-form-variables",
              "title": "Environment form variables",
              "description": "Environment-specific form variables that render on the environment approval settings modal",
              "type": "array",
              "items": {
                "$id": "#/definitions/form-variable",
                "title": "Form variable",
                "description": "A form variable describes an object property that the LaunchDarkly admin will be prompted for when they configure an integration.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "key",
                    "name",
                    "type",
                    "description",
                    "placeholder",
                    "isSecret",
                    "isHidden",
                    "isOptional",
                    "defaultValue",
                    "allowedValues",
                    "dynamicOptions",
                    "dependsOn"
                  ]
                },
                "properties": {
                  "key": {
                    "$id": "#/definitions/form-variable/key",
                    "title": "Key",
                    "type": "string",
                    "description": "A key will be used as the token name when the variable is substituted",
                    "maxLength": 20,
                    "pattern": "^[^\\s]*$"
                  },
                  "name": {
                    "$id": "#/definitions/form-variable/name",
                    "title": "Name",
                    "type": "string",
                    "description": "A descriptive name that will be used as the form label on the UI",
                    "maxLength": 50
                  },
                  "type": {
                    "$id": "#/definitions/form-variable/type",
                    "title": "Type",
                    "type": "string",
                    "description": "The type of the variable",
                    "enum": [
                      "string",
                      "boolean",
                      "uri",
                      "enum",
                      "oauth",
                      "dynamicEnum",
                      "generated"
                    ]
                  },
                  "description": {
                    "$id": "#/definitions/form-variable/description",
                    "title": "Description",
                    "type": "string",
                    "description": "Describes the variable in the UI. Markdown links allowed.",
                    "maxLength": 250
                  },
                  "placeholder": {
                    "$id": "#/definitions/form-variable/placeholder",
                    "title": "Description",
                    "type": "string",
                    "description": "Placeholder value to use in the form element if applicable"
                  },
                  "isSecret": {
                    "$id": "#/definitions/form-variable/is-secret",
                    "title": "Is this variable a secret?",
                    "type": "boolean",
                    "description": "Secret variables will be masked in the UI",
                    "default": false
                  },
                  "isOptional": {
                    "$id": "#/definitions/form-variable/is-optional",
                    "title": "Is this variable optional?",
                    "type": "boolean",
                    "description": "Variables marked as optional won't be required on the UI",
                    "default": false
                  },
                  "isHidden": {
                    "$id": "#/definitions/form-variable/is-hidden",
                    "title": "Hide variable in the UI",
                    "type": "boolean",
                    "description": "Variables marked as hidden won't be displayed on the UI",
                    "default": false
                  },
                  "defaultValue": {
                    "$id": "#/definitions/form-variable/default-value",
                    "title": "Default value",
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Default value for variable. Can be overridden by the user in the UI"
                  },
                  "allowedValues": {
                    "$id": "#/definitions/form-variable/allowed-values",
                    "title": "Allowed values",
                    "type": "array",
                    "description": "Allowed string values for enum-type formVariables",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dynamicOptions": {
                    "$id": "#/definitions/form-variable/dynamic-options",
                    "title": "Dynamic options",
                    "type": "object",
                    "description": "Parser and endpoint for handling dynamicEnum",
                    "propertyNames": {
                      "enum": [
                        "endpoint",
                        "parser"
                      ]
                    },
                    "required": [
                      "endpoint",
                      "parser"
                    ],
                    "properties": {
                      "endpoint": {
                        "$id": "#/definitions/endpoint",
                        "title": "Endpoint",
                        "description": "Properties that describe an HTTP request to an external endpoint",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "url",
                            "method",
                            "headers",
                            "hmacSignature"
                          ]
                        },
                        "properties": {
                          "url": {
                            "$id": "#/definitions/endpoint/url",
                            "title": "URL",
                            "type": "string",
                            "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                          },
                          "method": {
                            "$id": "#/definitions/endpoint/method",
                            "title": "HTTP method",
                            "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                            "enum": [
                              "POST",
                              "PUT",
                              "PATCH",
                              "GET",
                              "DELETE"
                            ],
                            "type": "string"
                          },
                          "headers": {
                            "$id": "#/definitions/endpoint/headers",
                            "title": "HTTP headers",
                            "description": "Headers to send with the webhook request",
                            "type": "array",
                            "items": {
                              "$id": "#/definitions/endpoint/header/items",
                              "title": "Header items",
                              "description": "A name and value pair to send as headers with the hook request",
                              "type": "object",
                              "propertyNames": {
                                "enum": [
                                  "name",
                                  "value"
                                ]
                              },
                              "properties": {
                                "name": {
                                  "$id": "#/definitions/endpoint/header/items/name",
                                  "title": "Name",
                                  "type": "string",
                                  "description": "Name of the header",
                                  "maxLength": 50,
                                  "pattern": "^[^\\s]*$"
                                },
                                "value": {
                                  "$id": "#/definitions/endpoint/header/items/value",
                                  "title": "Value",
                                  "type": "string",
                                  "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                                }
                              },
                              "required": [
                                "name",
                                "value"
                              ]
                            },
                            "default": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "examples": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{apiToken}}"
                              }
                            ],
                            "minProperties": 1
                          },
                          "hmacSignature": {
                            "$id": "#/definitions/endpoint/hmac-signature",
                            "title": "HMAC signature",
                            "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "headerName",
                                "hmacSecretFormVariableKey"
                              ]
                            },
                            "properties": {
                              "headerName": {
                                "$id": "#/definitions/endpoint/hmac-signature/header-name",
                                "title": "HMAC signature header name",
                                "description": "The name of the HMAC signature header",
                                "type": "string"
                              },
                              "hmacSecretFormVariableKey": {
                                "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                                "title": "HMAC secret form variable key",
                                "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "required": [
                          "url",
                          "method"
                        ]
                      },
                      "parser": {
                        "$id": "#/definitions/form-variable/dynamic-options/parser",
                        "title": "Dynamic options parser",
                        "description": "Mapping of property names to location in JSON response",
                        "type": "object",
                        "required": [
                          "optionsPath",
                          "optionsItems"
                        ],
                        "propertyNames": {
                          "enum": [
                            "optionsPath",
                            "optionsItems"
                          ]
                        },
                        "properties": {
                          "optionsPath": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-path",
                            "title": "Options array path",
                            "description": "JSON path to the array containing options for parsing",
                            "type": "string"
                          },
                          "optionsItems": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-items",
                            "title": "Options array",
                            "propertyNames": {
                              "enum": [
                                "label",
                                "value"
                              ]
                            },
                            "required": [
                              "label",
                              "value"
                            ],
                            "properties": {
                              "label": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/label",
                                "title": "Label",
                                "description": "Relative JSON path to values for each item in the options array to be used as UI dropdown labels",
                                "type": "string"
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/value",
                                "title": "Value",
                                "description": "Relative JSON path to values for each item in the options array to be used as dropdown values",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "dependsOn": {
                    "$id": "#/definitions/form-variable/depends-on",
                    "title": "Depends on",
                    "type": "array",
                    "description": "Dependency configuration to control the state and visibility of the form field.",
                    "items": {
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "variableKey",
                          "variableLocation",
                          "conditions",
                          "action"
                        ]
                      },
                      "required": [
                        "variableKey",
                        "variableLocation",
                        "conditions",
                        "action"
                      ],
                      "properties": {
                        "variableKey": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key",
                          "title": "Variable key",
                          "type": "string",
                          "description": "Key for the form variable that this form field depends on",
                          "maxLength": 20,
                          "pattern": "^[^\\s]*$"
                        },
                        "variableLocation": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key-location",
                          "title": "Variable Location",
                          "type": "string",
                          "description": "Which form variable type is the variable key defined or located in?",
                          "enum": [
                            "flagFormVariables",
                            "environmentFormVariables",
                            "formVariables"
                          ]
                        },
                        "action": {
                          "$id": "#/definitions/form-variable/depends-on/action",
                          "title": "Action",
                          "type": "string",
                          "enum": [
                            "hideField",
                            "showField"
                          ],
                          "description": "Action to be taken when your defined conditions evaluates to true"
                        },
                        "conditions": {
                          "$id": "#/definitions/form-variable/depends-on/conditions",
                          "title": "Conditions",
                          "type": "array",
                          "description": "Conditional configurations to be evaluated to decide whether an action should taken for the form field.",
                          "items": {
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "operator",
                                "value"
                              ]
                            },
                            "required": [
                              "operator",
                              "value"
                            ],
                            "properties": {
                              "operator": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/operator",
                                "title": "Operator",
                                "type": "string",
                                "description": "Name of the operator for evaluating a condition.",
                                "enum": [
                                  "lessThan",
                                  "lessThanOrEqualTo",
                                  "greaterThan",
                                  "greaterThanOrEqualTo",
                                  "equalTo",
                                  "notEqual",
                                  "contains",
                                  "startsWith",
                                  "endsWith"
                                ]
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/value",
                                "title": "Value",
                                "type": "string",
                                "maxLength": 250,
                                "description": "Target value that conditions are evaluated against"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "key",
                  "name",
                  "type",
                  "description"
                ]
              },
              "default": []
            },
            "flagFormVariables": {
              "$id": "#/capabilities/approval/flag-form-variables",
              "title": "Flag form variables",
              "description": "Flag-specific form variables that render on the approval request creation modal",
              "type": "array",
              "items": {
                "$id": "#/definitions/form-variable",
                "title": "Form variable",
                "description": "A form variable describes an object property that the LaunchDarkly admin will be prompted for when they configure an integration.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "key",
                    "name",
                    "type",
                    "description",
                    "placeholder",
                    "isSecret",
                    "isHidden",
                    "isOptional",
                    "defaultValue",
                    "allowedValues",
                    "dynamicOptions",
                    "dependsOn"
                  ]
                },
                "properties": {
                  "key": {
                    "$id": "#/definitions/form-variable/key",
                    "title": "Key",
                    "type": "string",
                    "description": "A key will be used as the token name when the variable is substituted",
                    "maxLength": 20,
                    "pattern": "^[^\\s]*$"
                  },
                  "name": {
                    "$id": "#/definitions/form-variable/name",
                    "title": "Name",
                    "type": "string",
                    "description": "A descriptive name that will be used as the form label on the UI",
                    "maxLength": 50
                  },
                  "type": {
                    "$id": "#/definitions/form-variable/type",
                    "title": "Type",
                    "type": "string",
                    "description": "The type of the variable",
                    "enum": [
                      "string",
                      "boolean",
                      "uri",
                      "enum",
                      "oauth",
                      "dynamicEnum",
                      "generated"
                    ]
                  },
                  "description": {
                    "$id": "#/definitions/form-variable/description",
                    "title": "Description",
                    "type": "string",
                    "description": "Describes the variable in the UI. Markdown links allowed.",
                    "maxLength": 250
                  },
                  "placeholder": {
                    "$id": "#/definitions/form-variable/placeholder",
                    "title": "Description",
                    "type": "string",
                    "description": "Placeholder value to use in the form element if applicable"
                  },
                  "isSecret": {
                    "$id": "#/definitions/form-variable/is-secret",
                    "title": "Is this variable a secret?",
                    "type": "boolean",
                    "description": "Secret variables will be masked in the UI",
                    "default": false
                  },
                  "isOptional": {
                    "$id": "#/definitions/form-variable/is-optional",
                    "title": "Is this variable optional?",
                    "type": "boolean",
                    "description": "Variables marked as optional won't be required on the UI",
                    "default": false
                  },
                  "isHidden": {
                    "$id": "#/definitions/form-variable/is-hidden",
                    "title": "Hide variable in the UI",
                    "type": "boolean",
                    "description": "Variables marked as hidden won't be displayed on the UI",
                    "default": false
                  },
                  "defaultValue": {
                    "$id": "#/definitions/form-variable/default-value",
                    "title": "Default value",
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Default value for variable. Can be overridden by the user in the UI"
                  },
                  "allowedValues": {
                    "$id": "#/definitions/form-variable/allowed-values",
                    "title": "Allowed values",
                    "type": "array",
                    "description": "Allowed string values for enum-type formVariables",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dynamicOptions": {
                    "$id": "#/definitions/form-variable/dynamic-options",
                    "title": "Dynamic options",
                    "type": "object",
                    "description": "Parser and endpoint for handling dynamicEnum",
                    "propertyNames": {
                      "enum": [
                        "endpoint",
                        "parser"
                      ]
                    },
                    "required": [
                      "endpoint",
                      "parser"
                    ],
                    "properties": {
                      "endpoint": {
                        "$id": "#/definitions/endpoint",
                        "title": "Endpoint",
                        "description": "Properties that describe an HTTP request to an external endpoint",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "url",
                            "method",
                            "headers",
                            "hmacSignature"
                          ]
                        },
                        "properties": {
                          "url": {
                            "$id": "#/definitions/endpoint/url",
                            "title": "URL",
                            "type": "string",
                            "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                          },
                          "method": {
                            "$id": "#/definitions/endpoint/method",
                            "title": "HTTP method",
                            "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                            "enum": [
                              "POST",
                              "PUT",
                              "PATCH",
                              "GET",
                              "DELETE"
                            ],
                            "type": "string"
                          },
                          "headers": {
                            "$id": "#/definitions/endpoint/headers",
                            "title": "HTTP headers",
                            "description": "Headers to send with the webhook request",
                            "type": "array",
                            "items": {
                              "$id": "#/definitions/endpoint/header/items",
                              "title": "Header items",
                              "description": "A name and value pair to send as headers with the hook request",
                              "type": "object",
                              "propertyNames": {
                                "enum": [
                                  "name",
                                  "value"
                                ]
                              },
                              "properties": {
                                "name": {
                                  "$id": "#/definitions/endpoint/header/items/name",
                                  "title": "Name",
                                  "type": "string",
                                  "description": "Name of the header",
                                  "maxLength": 50,
                                  "pattern": "^[^\\s]*$"
                                },
                                "value": {
                                  "$id": "#/definitions/endpoint/header/items/value",
                                  "title": "Value",
                                  "type": "string",
                                  "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                                }
                              },
                              "required": [
                                "name",
                                "value"
                              ]
                            },
                            "default": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "examples": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{apiToken}}"
                              }
                            ],
                            "minProperties": 1
                          },
                          "hmacSignature": {
                            "$id": "#/definitions/endpoint/hmac-signature",
                            "title": "HMAC signature",
                            "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "headerName",
                                "hmacSecretFormVariableKey"
                              ]
                            },
                            "properties": {
                              "headerName": {
                                "$id": "#/definitions/endpoint/hmac-signature/header-name",
                                "title": "HMAC signature header name",
                                "description": "The name of the HMAC signature header",
                                "type": "string"
                              },
                              "hmacSecretFormVariableKey": {
                                "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                                "title": "HMAC secret form variable key",
                                "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "required": [
                          "url",
                          "method"
                        ]
                      },
                      "parser": {
                        "$id": "#/definitions/form-variable/dynamic-options/parser",
                        "title": "Dynamic options parser",
                        "description": "Mapping of property names to location in JSON response",
                        "type": "object",
                        "required": [
                          "optionsPath",
                          "optionsItems"
                        ],
                        "propertyNames": {
                          "enum": [
                            "optionsPath",
                            "optionsItems"
                          ]
                        },
                        "properties": {
                          "optionsPath": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-path",
                            "title": "Options array path",
                            "description": "JSON path to the array containing options for parsing",
                            "type": "string"
                          },
                          "optionsItems": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-items",
                            "title": "Options array",
                            "propertyNames": {
                              "enum": [
                                "label",
                                "value"
                              ]
                            },
                            "required": [
                              "label",
                              "value"
                            ],
                            "properties": {
                              "label": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/label",
                                "title": "Label",
                                "description": "Relative JSON path to values for each item in the options array to be used as UI dropdown labels",
                                "type": "string"
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/value",
                                "title": "Value",
                                "description": "Relative JSON path to values for each item in the options array to be used as dropdown values",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "dependsOn": {
                    "$id": "#/definitions/form-variable/depends-on",
                    "title": "Depends on",
                    "type": "array",
                    "description": "Dependency configuration to control the state and visibility of the form field.",
                    "items": {
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "variableKey",
                          "variableLocation",
                          "conditions",
                          "action"
                        ]
                      },
                      "required": [
                        "variableKey",
                        "variableLocation",
                        "conditions",
                        "action"
                      ],
                      "properties": {
                        "variableKey": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key",
                          "title": "Variable key",
                          "type": "string",
                          "description": "Key for the form variable that this form field depends on",
                          "maxLength": 20,
                          "pattern": "^[^\\s]*$"
                        },
                        "variableLocation": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key-location",
                          "title": "Variable Location",
                          "type": "string",
                          "description": "Which form variable type is the variable key defined or located in?",
                          "enum": [
                            "flagFormVariables",
                            "environmentFormVariables",
                            "formVariables"
                          ]
                        },
                        "action": {
                          "$id": "#/definitions/form-variable/depends-on/action",
                          "title": "Action",
                          "type": "string",
                          "enum": [
                            "hideField",
                            "showField"
                          ],
                          "description": "Action to be taken when your defined conditions evaluates to true"
                        },
                        "conditions": {
                          "$id": "#/definitions/form-variable/depends-on/conditions",
                          "title": "Conditions",
                          "type": "array",
                          "description": "Conditional configurations to be evaluated to decide whether an action should taken for the form field.",
                          "items": {
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "operator",
                                "value"
                              ]
                            },
                            "required": [
                              "operator",
                              "value"
                            ],
                            "properties": {
                              "operator": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/operator",
                                "title": "Operator",
                                "type": "string",
                                "description": "Name of the operator for evaluating a condition.",
                                "enum": [
                                  "lessThan",
                                  "lessThanOrEqualTo",
                                  "greaterThan",
                                  "greaterThanOrEqualTo",
                                  "equalTo",
                                  "notEqual",
                                  "contains",
                                  "startsWith",
                                  "endsWith"
                                ]
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/value",
                                "title": "Value",
                                "type": "string",
                                "maxLength": 250,
                                "description": "Target value that conditions are evaluated against"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "key",
                  "name",
                  "type",
                  "description"
                ]
              },
              "default": []
            },
            "creationRequest": {
              "$id": "#/capabilities/approval/creation-request",
              "title": "Creation request",
              "description": "Describes the approval creation HTTP request and the parser used to process the JSON response",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "jsonBody",
                  "parser"
                ]
              },
              "required": [
                "endpoint"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "jsonBody": {
                  "$id": "#/definitions/json-body",
                  "title": "JSON Body",
                  "description": "Template string used to render the JSON request body",
                  "type": "string"
                },
                "parser": {
                  "$id": "#/approval-parser",
                  "title": "Approval parser",
                  "description": "Describes a mapping of property names to a location in the JSON response payload specified by a JSON pointer",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "approvalId",
                      "statusValue",
                      "statusDisplay",
                      "approvalMatcher",
                      "rejectionMatcher",
                      "urlTemplate"
                    ]
                  },
                  "required": [
                    "statusValue",
                    "approvalMatcher"
                  ],
                  "properties": {
                    "approvalId": {
                      "$id": "#/approval-parser/approval-id",
                      "title": "Approval ID pointer",
                      "description": "Externally-created approval entity ID",
                      "type": "string"
                    },
                    "statusValue": {
                      "$id": "#/approval-parser/status-value",
                      "title": "Status Value pointer",
                      "description": "JSON pointer to a status value",
                      "type": "string"
                    },
                    "statusDisplay": {
                      "$id": "#/approval-parser/status-display",
                      "title": "Status Value display pointer",
                      "description": "JSON pointer to a human-readable status",
                      "type": "string"
                    },
                    "approvalMatcher": {
                      "$id": "#/approval-parser/approval-matcher",
                      "title": "Approval matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'approved'",
                      "type": "string"
                    },
                    "rejectionMatcher": {
                      "$id": "#/approval-parser/rejection-matcher",
                      "title": "Rejection matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'rejected'",
                      "type": "string"
                    },
                    "urlTemplate": {
                      "$id": "#/approval-parser/url-template",
                      "title": "URL template",
                      "description": "expected format for the external creation request URL. Values can be substituted in using {{value}}",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "statusRequest": {
              "$id": "#/capabilities/approval/status-request",
              "title": "Status Request",
              "description": "Describes the approval status check HTTP request and the parser used to determine if the approval should be consider approved or rejected",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "jsonBody",
                  "parser"
                ]
              },
              "required": [
                "endpoint",
                "parser"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "jsonBody": {
                  "$id": "#/definitions/json-body",
                  "title": "JSON Body",
                  "description": "Template string used to render the JSON request body",
                  "type": "string"
                },
                "parser": {
                  "$id": "#/approval-parser",
                  "title": "Approval parser",
                  "description": "Describes a mapping of property names to a location in the JSON response payload specified by a JSON pointer",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "approvalId",
                      "statusValue",
                      "statusDisplay",
                      "approvalMatcher",
                      "rejectionMatcher",
                      "urlTemplate"
                    ]
                  },
                  "required": [
                    "statusValue",
                    "approvalMatcher"
                  ],
                  "properties": {
                    "approvalId": {
                      "$id": "#/approval-parser/approval-id",
                      "title": "Approval ID pointer",
                      "description": "Externally-created approval entity ID",
                      "type": "string"
                    },
                    "statusValue": {
                      "$id": "#/approval-parser/status-value",
                      "title": "Status Value pointer",
                      "description": "JSON pointer to a status value",
                      "type": "string"
                    },
                    "statusDisplay": {
                      "$id": "#/approval-parser/status-display",
                      "title": "Status Value display pointer",
                      "description": "JSON pointer to a human-readable status",
                      "type": "string"
                    },
                    "approvalMatcher": {
                      "$id": "#/approval-parser/approval-matcher",
                      "title": "Approval matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'approved'",
                      "type": "string"
                    },
                    "rejectionMatcher": {
                      "$id": "#/approval-parser/rejection-matcher",
                      "title": "Rejection matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'rejected'",
                      "type": "string"
                    },
                    "urlTemplate": {
                      "$id": "#/approval-parser/url-template",
                      "title": "URL template",
                      "description": "expected format for the external creation request URL. Values can be substituted in using {{value}}",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "postApplyRequest": {
              "$id": "#/capabilities/approval/post-apply-request",
              "title": "Post Apply Request",
              "description": "Describes the HTTP request to make after the changes have been applied in LaunchDarkly",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "jsonBody",
                  "parser"
                ]
              },
              "required": [
                "endpoint",
                "parser"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "jsonBody": {
                  "$id": "#/definitions/json-body",
                  "title": "JSON Body",
                  "description": "Template string used to render the JSON request body",
                  "type": "string"
                },
                "parser": {
                  "$id": "#/approval-parser",
                  "title": "Approval parser",
                  "description": "Describes a mapping of property names to a location in the JSON response payload specified by a JSON pointer",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "approvalId",
                      "statusValue",
                      "statusDisplay",
                      "approvalMatcher",
                      "rejectionMatcher",
                      "urlTemplate"
                    ]
                  },
                  "required": [
                    "statusValue",
                    "approvalMatcher"
                  ],
                  "properties": {
                    "approvalId": {
                      "$id": "#/approval-parser/approval-id",
                      "title": "Approval ID pointer",
                      "description": "Externally-created approval entity ID",
                      "type": "string"
                    },
                    "statusValue": {
                      "$id": "#/approval-parser/status-value",
                      "title": "Status Value pointer",
                      "description": "JSON pointer to a status value",
                      "type": "string"
                    },
                    "statusDisplay": {
                      "$id": "#/approval-parser/status-display",
                      "title": "Status Value display pointer",
                      "description": "JSON pointer to a human-readable status",
                      "type": "string"
                    },
                    "approvalMatcher": {
                      "$id": "#/approval-parser/approval-matcher",
                      "title": "Approval matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'approved'",
                      "type": "string"
                    },
                    "rejectionMatcher": {
                      "$id": "#/approval-parser/rejection-matcher",
                      "title": "Rejection matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'rejected'",
                      "type": "string"
                    },
                    "urlTemplate": {
                      "$id": "#/approval-parser/url-template",
                      "title": "URL template",
                      "description": "expected format for the external creation request URL. Values can be substituted in using {{value}}",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "deletionRequest": {
              "$id": "#/capabilities/approval/deletion-request",
              "title": "Deletion Request",
              "description": "Describes the HTTP request for the deletion of the external approval entity",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "jsonBody",
                  "parser"
                ]
              },
              "required": [
                "endpoint",
                "parser"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "jsonBody": {
                  "$id": "#/definitions/json-body",
                  "title": "JSON Body",
                  "description": "Template string used to render the JSON request body",
                  "type": "string"
                },
                "parser": {
                  "$id": "#/approval-parser",
                  "title": "Approval parser",
                  "description": "Describes a mapping of property names to a location in the JSON response payload specified by a JSON pointer",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "approvalId",
                      "statusValue",
                      "statusDisplay",
                      "approvalMatcher",
                      "rejectionMatcher",
                      "urlTemplate"
                    ]
                  },
                  "required": [
                    "statusValue",
                    "approvalMatcher"
                  ],
                  "properties": {
                    "approvalId": {
                      "$id": "#/approval-parser/approval-id",
                      "title": "Approval ID pointer",
                      "description": "Externally-created approval entity ID",
                      "type": "string"
                    },
                    "statusValue": {
                      "$id": "#/approval-parser/status-value",
                      "title": "Status Value pointer",
                      "description": "JSON pointer to a status value",
                      "type": "string"
                    },
                    "statusDisplay": {
                      "$id": "#/approval-parser/status-display",
                      "title": "Status Value display pointer",
                      "description": "JSON pointer to a human-readable status",
                      "type": "string"
                    },
                    "approvalMatcher": {
                      "$id": "#/approval-parser/approval-matcher",
                      "title": "Approval matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'approved'",
                      "type": "string"
                    },
                    "rejectionMatcher": {
                      "$id": "#/approval-parser/rejection-matcher",
                      "title": "Rejection matcher",
                      "description": "regex pattern used to determine if the approval should be considered 'rejected'",
                      "type": "string"
                    },
                    "urlTemplate": {
                      "$id": "#/approval-parser/url-template",
                      "title": "URL template",
                      "description": "expected format for the external creation request URL. Values can be substituted in using {{value}}",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "featureStore": {
          "$id": "#/properties/capability/feature-store",
          "title": "Feature store",
          "description": "This capability allows LaunchDarkly to write feature flag data to a given provider",
          "type": "object",
          "propertyNames": {
            "enum": [
              "formVariables",
              "validationRequest",
              "featureStoreRequest"
            ]
          },
          "required": [
            "formVariables",
            "featureStoreRequest"
          ],
          "properties": {
            "formVariables": {
              "$id": "#/capabilities/feature-store/form-variables",
              "title": "Provider form variables",
              "description": "Provider specific configuration that LaunchDarkly needs in order to write feature flag data to the provider's data store",
              "type": "array",
              "items": {
                "$id": "#/definitions/form-variable",
                "title": "Form variable",
                "description": "A form variable describes an object property that the LaunchDarkly admin will be prompted for when they configure an integration.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "key",
                    "name",
                    "type",
                    "description",
                    "placeholder",
                    "isSecret",
                    "isHidden",
                    "isOptional",
                    "defaultValue",
                    "allowedValues",
                    "dynamicOptions",
                    "dependsOn"
                  ]
                },
                "properties": {
                  "key": {
                    "$id": "#/definitions/form-variable/key",
                    "title": "Key",
                    "type": "string",
                    "description": "A key will be used as the token name when the variable is substituted",
                    "maxLength": 20,
                    "pattern": "^[^\\s]*$"
                  },
                  "name": {
                    "$id": "#/definitions/form-variable/name",
                    "title": "Name",
                    "type": "string",
                    "description": "A descriptive name that will be used as the form label on the UI",
                    "maxLength": 50
                  },
                  "type": {
                    "$id": "#/definitions/form-variable/type",
                    "title": "Type",
                    "type": "string",
                    "description": "The type of the variable",
                    "enum": [
                      "string",
                      "boolean",
                      "uri",
                      "enum",
                      "oauth",
                      "dynamicEnum",
                      "generated"
                    ]
                  },
                  "description": {
                    "$id": "#/definitions/form-variable/description",
                    "title": "Description",
                    "type": "string",
                    "description": "Describes the variable in the UI. Markdown links allowed.",
                    "maxLength": 250
                  },
                  "placeholder": {
                    "$id": "#/definitions/form-variable/placeholder",
                    "title": "Description",
                    "type": "string",
                    "description": "Placeholder value to use in the form element if applicable"
                  },
                  "isSecret": {
                    "$id": "#/definitions/form-variable/is-secret",
                    "title": "Is this variable a secret?",
                    "type": "boolean",
                    "description": "Secret variables will be masked in the UI",
                    "default": false
                  },
                  "isOptional": {
                    "$id": "#/definitions/form-variable/is-optional",
                    "title": "Is this variable optional?",
                    "type": "boolean",
                    "description": "Variables marked as optional won't be required on the UI",
                    "default": false
                  },
                  "isHidden": {
                    "$id": "#/definitions/form-variable/is-hidden",
                    "title": "Hide variable in the UI",
                    "type": "boolean",
                    "description": "Variables marked as hidden won't be displayed on the UI",
                    "default": false
                  },
                  "defaultValue": {
                    "$id": "#/definitions/form-variable/default-value",
                    "title": "Default value",
                    "type": [
                      "boolean",
                      "string"
                    ],
                    "description": "Default value for variable. Can be overridden by the user in the UI"
                  },
                  "allowedValues": {
                    "$id": "#/definitions/form-variable/allowed-values",
                    "title": "Allowed values",
                    "type": "array",
                    "description": "Allowed string values for enum-type formVariables",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dynamicOptions": {
                    "$id": "#/definitions/form-variable/dynamic-options",
                    "title": "Dynamic options",
                    "type": "object",
                    "description": "Parser and endpoint for handling dynamicEnum",
                    "propertyNames": {
                      "enum": [
                        "endpoint",
                        "parser"
                      ]
                    },
                    "required": [
                      "endpoint",
                      "parser"
                    ],
                    "properties": {
                      "endpoint": {
                        "$id": "#/definitions/endpoint",
                        "title": "Endpoint",
                        "description": "Properties that describe an HTTP request to an external endpoint",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "url",
                            "method",
                            "headers",
                            "hmacSignature"
                          ]
                        },
                        "properties": {
                          "url": {
                            "$id": "#/definitions/endpoint/url",
                            "title": "URL",
                            "type": "string",
                            "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                          },
                          "method": {
                            "$id": "#/definitions/endpoint/method",
                            "title": "HTTP method",
                            "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                            "enum": [
                              "POST",
                              "PUT",
                              "PATCH",
                              "GET",
                              "DELETE"
                            ],
                            "type": "string"
                          },
                          "headers": {
                            "$id": "#/definitions/endpoint/headers",
                            "title": "HTTP headers",
                            "description": "Headers to send with the webhook request",
                            "type": "array",
                            "items": {
                              "$id": "#/definitions/endpoint/header/items",
                              "title": "Header items",
                              "description": "A name and value pair to send as headers with the hook request",
                              "type": "object",
                              "propertyNames": {
                                "enum": [
                                  "name",
                                  "value"
                                ]
                              },
                              "properties": {
                                "name": {
                                  "$id": "#/definitions/endpoint/header/items/name",
                                  "title": "Name",
                                  "type": "string",
                                  "description": "Name of the header",
                                  "maxLength": 50,
                                  "pattern": "^[^\\s]*$"
                                },
                                "value": {
                                  "$id": "#/definitions/endpoint/header/items/value",
                                  "title": "Value",
                                  "type": "string",
                                  "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                                }
                              },
                              "required": [
                                "name",
                                "value"
                              ]
                            },
                            "default": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "examples": [
                              {
                                "name": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "name": "Authorization",
                                "value": "Bearer {{apiToken}}"
                              }
                            ],
                            "minProperties": 1
                          },
                          "hmacSignature": {
                            "$id": "#/definitions/endpoint/hmac-signature",
                            "title": "HMAC signature",
                            "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "headerName",
                                "hmacSecretFormVariableKey"
                              ]
                            },
                            "properties": {
                              "headerName": {
                                "$id": "#/definitions/endpoint/hmac-signature/header-name",
                                "title": "HMAC signature header name",
                                "description": "The name of the HMAC signature header",
                                "type": "string"
                              },
                              "hmacSecretFormVariableKey": {
                                "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                                "title": "HMAC secret form variable key",
                                "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "required": [
                          "url",
                          "method"
                        ]
                      },
                      "parser": {
                        "$id": "#/definitions/form-variable/dynamic-options/parser",
                        "title": "Dynamic options parser",
                        "description": "Mapping of property names to location in JSON response",
                        "type": "object",
                        "required": [
                          "optionsPath",
                          "optionsItems"
                        ],
                        "propertyNames": {
                          "enum": [
                            "optionsPath",
                            "optionsItems"
                          ]
                        },
                        "properties": {
                          "optionsPath": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-path",
                            "title": "Options array path",
                            "description": "JSON path to the array containing options for parsing",
                            "type": "string"
                          },
                          "optionsItems": {
                            "$id": "#/definitions/form-variable/dynamic-options/parser/options-items",
                            "title": "Options array",
                            "propertyNames": {
                              "enum": [
                                "label",
                                "value"
                              ]
                            },
                            "required": [
                              "label",
                              "value"
                            ],
                            "properties": {
                              "label": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/label",
                                "title": "Label",
                                "description": "Relative JSON path to values for each item in the options array to be used as UI dropdown labels",
                                "type": "string"
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/dynamic-options/parser/options-items/value",
                                "title": "Value",
                                "description": "Relative JSON path to values for each item in the options array to be used as dropdown values",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "dependsOn": {
                    "$id": "#/definitions/form-variable/depends-on",
                    "title": "Depends on",
                    "type": "array",
                    "description": "Dependency configuration to control the state and visibility of the form field.",
                    "items": {
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "variableKey",
                          "variableLocation",
                          "conditions",
                          "action"
                        ]
                      },
                      "required": [
                        "variableKey",
                        "variableLocation",
                        "conditions",
                        "action"
                      ],
                      "properties": {
                        "variableKey": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key",
                          "title": "Variable key",
                          "type": "string",
                          "description": "Key for the form variable that this form field depends on",
                          "maxLength": 20,
                          "pattern": "^[^\\s]*$"
                        },
                        "variableLocation": {
                          "$id": "#/definitions/form-variable/depends-on/dependee-key-location",
                          "title": "Variable Location",
                          "type": "string",
                          "description": "Which form variable type is the variable key defined or located in?",
                          "enum": [
                            "flagFormVariables",
                            "environmentFormVariables",
                            "formVariables"
                          ]
                        },
                        "action": {
                          "$id": "#/definitions/form-variable/depends-on/action",
                          "title": "Action",
                          "type": "string",
                          "enum": [
                            "hideField",
                            "showField"
                          ],
                          "description": "Action to be taken when your defined conditions evaluates to true"
                        },
                        "conditions": {
                          "$id": "#/definitions/form-variable/depends-on/conditions",
                          "title": "Conditions",
                          "type": "array",
                          "description": "Conditional configurations to be evaluated to decide whether an action should taken for the form field.",
                          "items": {
                            "type": "object",
                            "propertyNames": {
                              "enum": [
                                "operator",
                                "value"
                              ]
                            },
                            "required": [
                              "operator",
                              "value"
                            ],
                            "properties": {
                              "operator": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/operator",
                                "title": "Operator",
                                "type": "string",
                                "description": "Name of the operator for evaluating a condition.",
                                "enum": [
                                  "lessThan",
                                  "lessThanOrEqualTo",
                                  "greaterThan",
                                  "greaterThanOrEqualTo",
                                  "equalTo",
                                  "notEqual",
                                  "contains",
                                  "startsWith",
                                  "endsWith"
                                ]
                              },
                              "value": {
                                "$id": "#/definitions/form-variable/depends-on/conditions/value",
                                "title": "Value",
                                "type": "string",
                                "maxLength": 250,
                                "description": "Target value that conditions are evaluated against"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "key",
                  "name",
                  "type",
                  "description"
                ]
              },
              "default": []
            },
            "validationRequest": {
              "$id": "#/capabilities/feature-store/validation-request",
              "title": "Validation request",
              "description": "Details needed to make a request to test that the provided form variables are valid",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "parser"
                ]
              },
              "required": [
                "endpoint",
                "parser"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "parser": {
                  "$id": "#/feature-store-validation-parser",
                  "title": "Feature store validation parser",
                  "description": "Mapping to success/errors value(s) in a JSON response body",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "success",
                      "errors"
                    ]
                  },
                  "required": [
                    "success"
                  ],
                  "properties": {
                    "success": {
                      "$id": "#/capabilities/feature-store/feature-store-validation/parser/success",
                      "title": "Success pointer",
                      "type": "string"
                    },
                    "errors": {
                      "$id": "#/capabilities/feature-store/feature-store-validation/parser/errors",
                      "title": "Errors pointer",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "featureStoreRequest": {
              "$id": "#/capabilities/feature-store/feature-store-request",
              "title": "Feature store request",
              "description": "Details needed to make a request to deliver the flag payload to the feature store",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "endpoint",
                  "payloadPrefix",
                  "payloadSuffix"
                ]
              },
              "required": [
                "endpoint"
              ],
              "properties": {
                "endpoint": {
                  "$id": "#/definitions/endpoint",
                  "title": "Endpoint",
                  "description": "Properties that describe an HTTP request to an external endpoint",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "url",
                      "method",
                      "headers",
                      "hmacSignature"
                    ]
                  },
                  "properties": {
                    "url": {
                      "$id": "#/definitions/endpoint/url",
                      "title": "URL",
                      "type": "string",
                      "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
                    },
                    "method": {
                      "$id": "#/definitions/endpoint/method",
                      "title": "HTTP method",
                      "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                      "enum": [
                        "POST",
                        "PUT",
                        "PATCH",
                        "GET",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "headers": {
                      "$id": "#/definitions/endpoint/headers",
                      "title": "HTTP headers",
                      "description": "Headers to send with the webhook request",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/endpoint/header/items",
                        "title": "Header items",
                        "description": "A name and value pair to send as headers with the hook request",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "name",
                            "value"
                          ]
                        },
                        "properties": {
                          "name": {
                            "$id": "#/definitions/endpoint/header/items/name",
                            "title": "Name",
                            "type": "string",
                            "description": "Name of the header",
                            "maxLength": 50,
                            "pattern": "^[^\\s]*$"
                          },
                          "value": {
                            "$id": "#/definitions/endpoint/header/items/value",
                            "title": "Value",
                            "type": "string",
                            "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "default": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "examples": [
                        {
                          "name": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "name": "Authorization",
                          "value": "Bearer {{apiToken}}"
                        }
                      ],
                      "minProperties": 1
                    },
                    "hmacSignature": {
                      "$id": "#/definitions/endpoint/hmac-signature",
                      "title": "HMAC signature",
                      "description": "Whether or not and how to configure HMAC validation on outgoing webhooks",
                      "type": "object",
                      "propertyNames": {
                        "enum": [
                          "headerName",
                          "hmacSecretFormVariableKey"
                        ]
                      },
                      "properties": {
                        "headerName": {
                          "$id": "#/definitions/endpoint/hmac-signature/header-name",
                          "title": "HMAC signature header name",
                          "description": "The name of the HMAC signature header",
                          "type": "string"
                        },
                        "hmacSecretFormVariableKey": {
                          "$id": "#/definitions/endpoint/hmac-signature/secret-form-variable-field",
                          "title": "HMAC secret form variable key",
                          "description": "The name of the form variable field that corresponds to the HMAC encryption secret",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "url",
                    "method"
                  ]
                },
                "payloadPrefix": {
                  "$id": "#/definitions/payloadPrefix",
                  "title": "Prefix",
                  "type": "string",
                  "description": "Optional prefix to wrap payload data with (used for some integrations)"
                },
                "payloadSuffix": {
                  "$id": "#/definitions/payloadSuffix",
                  "title": "Suffix",
                  "type": "string",
                  "description": "Optional suffix to wrap payload data with (used for some integrations)"
                }
              }
            }
          }
        },
        "flagLink": {
          "$id": "#/properties/capability/flag-link",
          "title": "flagLink",
          "description": "This capability is used to manage inbound flag links",
          "type": "object",
          "propertyNames": {
            "enum": [
              "uiBlocks",
              "emptyState",
              "header",
              "metadata"
            ]
          },
          "required": [
            "uiBlocks",
            "header",
            "emptyState"
          ],
          "properties": {
            "header": {
              "$id": "#/properties/capability/flag-link/header",
              "title": "Link group header",
              "description": "Sentence-cased title to show for all links for this integration",
              "type": "string"
            },
            "emptyState": {
              "$id": "#/properties/capability/flag-link/empty-state",
              "title": "Empty state",
              "description": "Content to display when there are no links to display for this integration",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "title",
                  "leadText"
                ]
              },
              "properties": {
                "title": {
                  "$id": "#/properties/capability/flag-link/empty-state/title",
                  "title": "Title",
                  "type": "string",
                  "description": "Title of the message"
                },
                "leadText": {
                  "$id": "#/properties/capability/flag-link/empty-state/lead-text",
                  "title": "Lead text",
                  "type": "string",
                  "description": "Text or markup content describing how links can be created for this integration"
                }
              }
            },
            "metadata": {
              "$id": "#/properties/capability/flag-link/metadata",
              "title": "FlagLink Metadata",
              "description": "Key/value pairs describing attributes for the flag link's payload metadata property. The key is the name of the metadata field and the value is the configuration object for the field.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "type"
                  ]
                },
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "$id": "#/properties/capability/flag-link/metadata/type",
                    "title": "Type",
                    "type": "string",
                    "description": "Data type for the metadata attribute",
                    "enum": [
                      "string",
                      "uri"
                    ]
                  }
                }
              }
            },
            "uiBlocks": {
              "$id": "#/properties/capability/flag-link/ui-blocks",
              "title": "UI Blocks",
              "description": "UI blocks are visual components that represents a section of the view layout for a flag link displayed in LaunchDarkly",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "image",
                  "name",
                  "title",
                  "context",
                  "description"
                ]
              },
              "properties": {
                "image": {
                  "$id": "#/properties/capability/flag-link/ui-blocks/image",
                  "title": "Image",
                  "type": "object",
                  "description": "A visual block used to render an image in LaunchDarkly UI",
                  "propertyNames": {
                    "enum": [
                      "sourceUrl",
                      "isIcon",
                      "isAvatar"
                    ]
                  },
                  "required": [
                    "sourceUrl"
                  ],
                  "properties": {
                    "sourceUrl": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/image/source-url",
                      "title": "Source Url",
                      "description": "Url of the image. Handlebars template notation can be used to reference metadata fields.",
                      "type": "string"
                    },
                    "isIcon": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/image/is-icon",
                      "title": "Is icon",
                      "description": "Indicates whether the image should be rendered as an icon",
                      "type": "boolean"
                    },
                    "isAvatar": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/image/is-avatar",
                      "title": "Is avatar",
                      "description": "Indicates whether the image should be rendered as an avatar",
                      "type": "boolean"
                    }
                  }
                },
                "name": {
                  "$id": "#/properties/capability/flag-link/ui-blocks/name",
                  "title": "Name",
                  "type": "string",
                  "description": "Template string used to render a visual block in LaunchDarkly UI to display a name"
                },
                "title": {
                  "$id": "#/properties/capability/flag-link/ui-blocks/title",
                  "title": "Title",
                  "type": "object",
                  "description": "Object with visual elements used to display a link title in LaunchDarkly UI",
                  "propertyNames": {
                    "enum": [
                      "elements",
                      "linkToReference"
                    ]
                  },
                  "required": [
                    "elements"
                  ],
                  "properties": {
                    "elements": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/title/elements",
                      "title": "Elements",
                      "description": "An array of elements to be combined to create a title block",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/ui-block-element",
                        "title": "UI Block Element",
                        "description": "A sub component of a UI block that can be combined with other elements to form a UI block",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "text",
                            "isBold",
                            "url",
                            "isTimestamp"
                          ]
                        },
                        "required": [
                          "text"
                        ],
                        "properties": {
                          "text": {
                            "$id": "#/definitions/ui-block-element/text",
                            "title": "Text",
                            "description": "Text to be displayed for the element. The text can contain template variables",
                            "type": "string"
                          },
                          "isBold": {
                            "$id": "#/definitions/ui-block-element/text",
                            "title": "Is bold",
                            "description": "Indicates whether the element should be bolded",
                            "type": "boolean",
                            "default": false
                          },
                          "isTimestamp": {
                            "$id": "#/definitions/ui-block-element/is-timestamp",
                            "title": "Is timestamp",
                            "description": "Indicates whether the element should be rendered as a timestamp",
                            "type": "boolean",
                            "default": false
                          },
                          "url": {
                            "$id": "#/definitions/ui-block-element/url",
                            "title": "Url",
                            "description": "URL to be set for the element which also indicates the element should be rendered as a hyperlink",
                            "type": "string"
                          }
                        }
                      },
                      "minLength": 1
                    },
                    "linkToReference": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/title/link-to-reference",
                      "title": "Link to reference",
                      "description": "Indicates whether the title should be displayed as a hyperlink in LaunchDarkly UI",
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "description": {
                  "$id": "#/properties/capability/flag-link/ui-blocks/description",
                  "title": "Description",
                  "type": "string",
                  "description": "Markdown string used to render a visual block in LaunchDarkly UI to display a link description"
                },
                "context": {
                  "$id": "#/properties/capability/flag-link/ui-blocks/link-context",
                  "title": "Flag Link Context",
                  "type": "object",
                  "description": "Object with visual elements used to display context information for a link in LaunchDarkly UI",
                  "propertyNames": {
                    "enum": [
                      "elements"
                    ]
                  },
                  "required": [
                    "elements"
                  ],
                  "properties": {
                    "elements": {
                      "$id": "#/properties/capability/flag-link/ui-blocks/context/elements",
                      "description": "An array of elements to be combined to create a context block",
                      "title": "Elements",
                      "type": "array",
                      "items": {
                        "$id": "#/definitions/ui-block-element",
                        "title": "UI Block Element",
                        "description": "A sub component of a UI block that can be combined with other elements to form a UI block",
                        "type": "object",
                        "propertyNames": {
                          "enum": [
                            "text",
                            "isBold",
                            "url",
                            "isTimestamp"
                          ]
                        },
                        "required": [
                          "text"
                        ],
                        "properties": {
                          "text": {
                            "$id": "#/definitions/ui-block-element/text",
                            "title": "Text",
                            "description": "Text to be displayed for the element. The text can contain template variables",
                            "type": "string"
                          },
                          "isBold": {
                            "$id": "#/definitions/ui-block-element/text",
                            "title": "Is bold",
                            "description": "Indicates whether the element should be bolded",
                            "type": "boolean",
                            "default": false
                          },
                          "isTimestamp": {
                            "$id": "#/definitions/ui-block-element/is-timestamp",
                            "title": "Is timestamp",
                            "description": "Indicates whether the element should be rendered as a timestamp",
                            "type": "boolean",
                            "default": false
                          },
                          "url": {
                            "$id": "#/definitions/ui-block-element/url",
                            "title": "Url",
                            "description": "URL to be set for the element which also indicates the element should be rendered as a hyperlink",
                            "type": "string"
                          }
                        }
                      },
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        },
        "hideConfiguration": {
          "$id": "#/properties/capability/hide-configuration",
          "title": "Hide Configuration",
          "description": "This capability will disable in-app editing for the integration",
          "type": "boolean",
          "default": false
        },
        "externalConfigurationURL": {
          "$id": "#/properties/capability/external-configuration-url",
          "title": "External Configuration URL",
          "description": "This capability will redirect users to an external URL when they attempt to create or edit the integration from the integrations page in LaunchDarkly.",
          "type": "string",
          "maxLength": 2048,
          "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
        },
        "externalConfigurationPages": {
          "$id": "#/properties/capability/external-configuration-pages",
          "title": "External Configuration Pages",
          "description": "This capability will redirect users to an external URL when they attempt to create or edit the integration from the integrations page in LaunchDarkly. It supports different URLs for create and edit.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "createUrl",
              "editUrl"
            ]
          },
          "required": [
            "createUrl",
            "editUrl"
          ],
          "properties": {
            "createUrl": {
              "$id": "#/properties/capability/external-configuration-url/createUrl",
              "title": "Create URL",
              "description": "URL to redirect to for external creation flow",
              "type": "string",
              "maxLength": 2048,
              "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
            },
            "editUrl": {
              "$id": "#/properties/capability/external-configuration-url/editUrl",
              "title": "Edit URL",
              "description": "URL to redirect to for external edit flow",
              "type": "string",
              "maxLength": 2048,
              "pattern": "^[Hh][Tt][Tt][Pp][Ss]?://"
            }
          }
        },
        "syncedSegment": {
          "$id": "#/properties/capability/synced-segment",
          "title": "syncedSegment",
          "description": "This capability is used to manage the creation and synchronization of synced segments",
          "type": "object",
          "propertyNames": {
            "enum": [
              "jsonResponseBody",
              "requestParser"
            ]
          },
          "required": [
            "requestParser"
          ],
          "properties": {
            "jsonResponseBody": {
              "$id": "#/properties/capability/synced-segment/json-body",
              "title": "Response body",
              "description": "JSON string to be returned as a response",
              "type": "string"
            },
            "requestParser": {
              "$id": "#/properties/capability/synced-segment/request-parser",
              "title": "Request parser",
              "description": "Describes a mapping of property name to a location in the JSON request payload specified by a JSON pointer",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "environmentIdPath",
                  "contextKindPath",
                  "cohortIdPath",
                  "cohortNamePath",
                  "cohortUrlPath",
                  "memberArrayPath",
                  "addMemberArrayPath",
                  "removeMemberArrayPath",
                  "arrayInclusion",
                  "memberArrayParser"
                ]
              },
              "required": [
                "environmentIdPath",
                "cohortIdPath",
                "cohortNamePath",
                "memberArrayParser"
              ],
              "properties": {
                "environmentIdPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/environment-id-path",
                  "title": "Environment id path",
                  "type": "string",
                  "description": "JSON pointer to the LaunchDarkly environment id"
                },
                "contextKindPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/context-kind-path",
                  "title": "Context kind path",
                  "type": "string",
                  "description": "JSON pointer to the LaunchDarkly context kind"
                },
                "cohortIdPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/cohort-id-path",
                  "title": "Cohort id path",
                  "type": "string",
                  "description": "JSON pointer to the cohort id"
                },
                "cohortNamePath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/cohort-name-path",
                  "title": "Cohort name path",
                  "type": "string",
                  "description": "JSON pointer to the cohort name"
                },
                "cohortUrlPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/cohort-url-path",
                  "title": "Cohort url path",
                  "type": "string",
                  "description": "JSON pointer to the cohort URL path"
                },
                "memberArrayPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/member-array-path",
                  "title": "Member array path",
                  "type": "string",
                  "description": "JSON pointer to the array containing members to be added or removed from the segment"
                },
                "addMemberArrayPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/add-member-array-path",
                  "title": "Add member array path",
                  "type": "string",
                  "description": "JSON pointer to the array containing members to be added to the segment. Required if removeMemberArrayPath is specified"
                },
                "removeMemberArrayPath": {
                  "$id": "#/properties/capability/synced-segment/request-parser/remove-member-array-path",
                  "title": "Remove member array path",
                  "type": "string",
                  "description": "JSON pointer to the array containing members to be removed to the segment. Required if addMemberArrayPath is specified"
                },
                "arrayInclusion": {
                  "$id": "#/properties/capability/synced-segment/request-parser/array-inclusion",
                  "title": "Array inclusion matcher",
                  "description": "Describes a mapping of property name to a location in the JSON request payload indicating the action to be taken for the members in the request payload",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "path",
                      "matcher"
                    ]
                  },
                  "required": [
                    "path",
                    "matcher"
                  ],
                  "properties": {
                    "path": {
                      "$id": "#/properties/capability/synced-segment/request-parser/array-inclusion/path",
                      "title": "Path",
                      "type": "string",
                      "description": "JSON pointer to the property that will be checked by the matcher property"
                    },
                    "matcher": {
                      "$id": "#/properties/capability/synced-segment/request-parser/array-inclusion/matcher",
                      "title": "Matcher",
                      "type": "string",
                      "description": "Regex indicating the action to be taken for the members in the segment. If it matches the value of path property, the members of the incoming segment will be added otherwise they will be removed"
                    }
                  }
                },
                "memberArrayParser": {
                  "$id": "#/properties/capability/synced-segment/request-parser/member-array-parser",
                  "title": "Member array parser",
                  "description": "Describes a mapping of property name to a location in the member array JSON payload specified by a JSON pointer. All paths are relative to the member array path",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "memberIdPath",
                      "booleanMembershipPath",
                      "cohortNamePath",
                      "cohortIdPath"
                    ]
                  },
                  "required": [
                    "memberIdPath"
                  ],
                  "properties": {
                    "memberIdPath": {
                      "$id": "#/properties/capability/synced-segment/request-parser/member-array-parser/member-id-path",
                      "title": "Member id path",
                      "type": "string",
                      "description": "JSON pointer to the member id"
                    },
                    "booleanMembershipPath": {
                      "$id": "#/properties/capability/synced-segment/request-parser/member-array-parser/boolean-membership-path",
                      "title": "Boolean membership path",
                      "type": "string",
                      "description": "JSON pointer to the property in member array payload indicating whether the member should be added or removed"
                    },
                    "cohortNamePath": {
                      "$id": "#/properties/capability/synced-segment/request-parser/member-array-parser/cohort-name-path",
                      "title": "Cohort name path",
                      "type": "string",
                      "description": "JSON pointer to the cohort name. Overrides the cohort name for a single member"
                    },
                    "cohortIdPath": {
                      "$id": "#/properties/capability/synced-segment/request-parser/member-array-parser/cohort-id-path",
                      "title": "Cohort id path",
                      "type": "string",
                      "description": "JSON pointer to the cohort id. Overrides the cohort id for a single member"
                    }
                  }
                }
              }
            }
          }
        },
        "bigSegmentStore": {
          "$id": "#/properties/capability/big-segment-store",
          "title": "Big segment store",
          "description": "This capability allows LaunchDarkly to sync big segment data directly to a user-managed database",
          "type": "object",
          "propertyNames": {
            "enum": [
              "dbStyle"
            ]
          },
          "required": [
            "dbStyle"
          ],
          "properties": {
            "dbStyle": {
              "$id": "#/properties/database-style",
              "title": "Database style",
              "type": "string",
              "enum": [
                "redis",
                "dynamoDB"
              ],
              "description": "Describes what type of database LaunchDarkly will sync big segments to"
            }
          }
        }
      }
    },
    "oauthIntegrationKey": {
      "$id": "#/properties/oauth-integration-key",
      "title": "OAuth Integration Key",
      "description": "Unique key to be used to save and retrieve OAuth credentials used by your app. This is required if your app uses an OAuth flow.",
      "minLength": 3,
      "maxLength": 100,
      "type": "string"
    }
  },
  "required": [
    "name",
    "version",
    "overview",
    "description",
    "author",
    "supportEmail",
    "links",
    "categories",
    "icons"
  ]
}
